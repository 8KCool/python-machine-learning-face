# -*- coding: utf-8 -*-
"""project_PCA.ipynb

Automatically generated by Colaboratory.

"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import fetch_lfw_people
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
import numpy as np
import random
import matplotlib.pyplot as plt
# import scikitplot as skplt

data=fetch_lfw_people(resize=0.4,min_faces_per_person=40,funneled=True)

l=list(data.keys())
X=data[l[0]]
Y=data[l[2]]
target_name=data[l[3]]

_,W,H=data[l[1]].shape
features=X.shape[1]
m=X.shape[0]
classes=data[l[3]].shape[0]

temp=list(zip(X,Y)) 
random.shuffle(temp) 
X,Y=zip(*temp)

X=np.array(X)
y=np.array(Y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

#preprocess the dataset

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.decomposition import PCA
pca = PCA(0.9)
pca.fit(X_train)
train_img = pca.transform(X_train)
test_img = pca.transform(X_test)

from sklearn import svm
svm_rbf=svm.SVC(kernel='rbf',gamma='scale',C=10,probability=True)
svm_rbf=svm_rbf.fit(train_img,y_train)
print("RBF score:")
print(svm_rbf.score(test_img,y_test)*100)

svm_lin=svm.SVC(kernel='linear',probability=True)
svm_lin=svm_lin.fit(train_img,y_train)
print("linear score:")
print(svm_lin.score(test_img,y_test)*100)

svm_quad=svm.SVC(kernel='poly',degree=2,gamma='scale',C=10,probability=True)
svm_quad=svm_quad.fit(train_img,y_train)
print("quad kernel score:")
print(svm_quad.score(test_img,y_test)*100)

clf = LogisticRegression(fit_intercept=False,solver='lbfgs',multi_class='ovr',max_iter=500,C=1e8)
clf.fit(train_img,y_train)
print("Logistic regression score:")
print(clf.score(test_img, y_test))
