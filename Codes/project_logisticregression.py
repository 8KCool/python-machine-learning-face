# -*- coding: utf-8 -*-
"""project_logisticregression.ipynb

Automatically generated by Colaboratory.

"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import fetch_lfw_people
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
import numpy as np
import random
import matplotlib.pyplot as plt
import scikitplot as skplt

lfw_people = fetch_lfw_people(min_faces_per_person=40, resize=0.5)
n_samples, h, w = lfw_people.images.shape

X = lfw_people.data
n_features = X.shape[1]

y = lfw_people.target
target_names = lfw_people.target_names
n_classes = target_names.shape[0]
print("Total dataset size:")
print("n_samples: %d" % n_samples)
print("n_features: %d" % n_features)
print("n_classes: %d" % n_classes)

# split into a training and testing set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

param = {'C': [1e6,1e7,1e8,1e9,1e10], 'max_iter':[100,500,1000]}
clf = GridSearchCV(LogisticRegression(fit_intercept=False,multi_class='ovr'),param, cv=5)
model_logg = clf.fit(X_train,y_train)
print(model_logg.best_estimator_)
# print("logistic regression")
ypred = model_logg.predict(X_test)

print(classification_report(y_test,ypred,target_names=target_names))

# ROC curve

y_probas = model_logg.predict_proba(X_test)
skplt.metrics.plot_roc(y_test,y_probas,title="ROC plot(logistic regression)")
plt.legend('')
plt.show()
